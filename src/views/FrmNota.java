/*
 * Copyright (C) 2015 Rodrigo
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package views;

import br.attique.utils.view.DefaultFormCadastro;
import java.awt.Font;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import models.Nota;
import persistence.NotaDAO;

/**
 *
 * @author Rodrigo
 */
public class FrmNota extends javax.swing.JFrame implements DefaultFormCadastro{

    /**
     * Creates new form FrmNota
     * @param parent
     * Frame pai
     * @param modal
     * Modo de exibição
     */
    
    private Nota nota;
    public FrmNota(java.awt.Frame parent, boolean modal) {
        
        initComponents();
        setLocationRelativeTo(this);
        
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent evt){
                fechar();
            }
        });
//        String pathImage = System.getProperty("user.dir") + "ico.png";
//        ImageIcon ico = new ImageIcon(pathImage);
//        this.setIconImage(ico.getImage());
    }//fim construtor

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtTitulo = new javax.swing.JTextField();
        dtcDataOcorrencia = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtNotas = new javax.swing.JTextPane();
        jLabel3 = new javax.swing.JLabel();
        txtProjeto = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        mnArquivo = new javax.swing.JMenu();
        mniNovo = new javax.swing.JMenuItem();
        mniAbrir = new javax.swing.JMenuItem();
        mniSalvar = new javax.swing.JMenuItem();
        mniSalvarComo = new javax.swing.JMenuItem();
        spImprimir = new javax.swing.JPopupMenu.Separator();
        mniImprimir = new javax.swing.JMenuItem();
        spSair = new javax.swing.JPopupMenu.Separator();
        mniSair = new javax.swing.JMenuItem();
        mnEditar = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Editor de Notas");
        setIconImage(new ImageIcon("./icone.ico").getImage());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setText("Titulo");

        txtTitulo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        dtcDataOcorrencia.setDate(new java.util.Date());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setText("Data de Ocorrencia");

        txtNotas.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jScrollPane1.setViewportView(txtNotas);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setText("Projeto");

        txtProjeto.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        mnArquivo.setMnemonic(java.awt.event.KeyEvent.VK_A);
        mnArquivo.setText("Arquivo");

        mniNovo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        mniNovo.setMnemonic(java.awt.event.KeyEvent.VK_N);
        mniNovo.setText("Novo");
        mniNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniNovoActionPerformed(evt);
            }
        });
        mnArquivo.add(mniNovo);

        mniAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mniAbrir.setMnemonic(java.awt.event.KeyEvent.VK_A);
        mniAbrir.setText("Abrir");
        mniAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniAbrirActionPerformed(evt);
            }
        });
        mnArquivo.add(mniAbrir);

        mniSalvar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mniSalvar.setMnemonic(java.awt.event.KeyEvent.VK_S);
        mniSalvar.setText("Salvar");
        mniSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSalvarActionPerformed(evt);
            }
        });
        mnArquivo.add(mniSalvar);

        mniSalvarComo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        mniSalvarComo.setMnemonic(java.awt.event.KeyEvent.VK_C);
        mniSalvarComo.setText("Salvar Como");
        mniSalvarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSalvarComoActionPerformed(evt);
            }
        });
        mnArquivo.add(mniSalvarComo);
        mnArquivo.add(spImprimir);

        mniImprimir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        mniImprimir.setMnemonic(java.awt.event.KeyEvent.VK_P);
        mniImprimir.setText("Imprimir");
        mniImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniImprimirActionPerformed(evt);
            }
        });
        mnArquivo.add(mniImprimir);
        mnArquivo.add(spSair);

        mniSair.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        mniSair.setMnemonic(java.awt.event.KeyEvent.VK_R);
        mniSair.setText("Sair");
        mniSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSairActionPerformed(evt);
            }
        });
        mnArquivo.add(mniSair);

        menuBar.add(mnArquivo);

        mnEditar.setMnemonic(java.awt.event.KeyEvent.VK_E);
        mnEditar.setText("Editar");

        jMenuItem1.setText("Desfazer");
        mnEditar.add(jMenuItem1);

        jMenuItem2.setText("Refazer");
        mnEditar.add(jMenuItem2);
        mnEditar.add(jSeparator1);

        jMenuItem3.setText("Recortar");
        mnEditar.add(jMenuItem3);

        jMenuItem4.setText("Copiar");
        mnEditar.add(jMenuItem4);

        jMenuItem5.setText("Colar");
        mnEditar.add(jMenuItem5);

        jMenuItem6.setText("Excluir");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        mnEditar.add(jMenuItem6);
        mnEditar.add(jSeparator2);

        jMenuItem7.setText("Localizar");
        mnEditar.add(jMenuItem7);

        jMenuItem8.setText("Subistituir");
        mnEditar.add(jMenuItem8);
        mnEditar.add(jSeparator3);

        jMenuItem9.setText("Selecionar Tudo");
        mnEditar.add(jMenuItem9);

        jMenuItem10.setText("Data e Hora");
        mnEditar.add(jMenuItem10);

        menuBar.add(mnEditar);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(dtcDataOcorrencia, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 164, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtProjeto, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addComponent(txtTitulo)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dtcDataOcorrencia, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtProjeto, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mniSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSalvarActionPerformed
        // TODO add your handling code here:
        salvar();
    }//GEN-LAST:event_mniSalvarActionPerformed

    private void mniSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSairActionPerformed
        /* É importante detectar alterações fietas antes de salvar.
         no nosso caso todas as funções levaria muito tempo entao so vamos sair sem savar.
        */
       fechar();
        
    }//GEN-LAST:event_mniSairActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void mniNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniNovoActionPerformed
        // TODO add your handling code here:
        novo();
    }//GEN-LAST:event_mniNovoActionPerformed

    private void mniSalvarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSalvarComoActionPerformed
        // TODO add your handling code here:
        salvarComo();
    }//GEN-LAST:event_mniSalvarComoActionPerformed

    private void mniAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniAbrirActionPerformed
        // TODO add your handling code here:
        PesquisaNotas pn = new PesquisaNotas(null, rootPaneCheckingEnabled);
        pn.setVisible(rootPaneCheckingEnabled);
        Nota n = pn.getNota();
        if (n != null){
            setDataForm(n);
        }
        
    }//GEN-LAST:event_mniAbrirActionPerformed

    private void mniImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniImprimirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mniImprimirActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser dtcDataOcorrencia;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu mnArquivo;
    private javax.swing.JMenu mnEditar;
    private javax.swing.JMenuItem mniAbrir;
    private javax.swing.JMenuItem mniImprimir;
    private javax.swing.JMenuItem mniNovo;
    private javax.swing.JMenuItem mniSair;
    private javax.swing.JMenuItem mniSalvar;
    private javax.swing.JMenuItem mniSalvarComo;
    private javax.swing.JPopupMenu.Separator spImprimir;
    private javax.swing.JPopupMenu.Separator spSair;
    private javax.swing.JTextPane txtNotas;
    private javax.swing.JTextField txtProjeto;
    private javax.swing.JTextField txtTitulo;
    // End of variables declaration//GEN-END:variables

    @Override
    public Object[] getDataForm() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setDataForm(Object objeto) {
        nota = (Nota)objeto;
        txtTitulo.setText(nota.getTitulo());
        txtProjeto.setText(nota.getProjeto());
        dtcDataOcorrencia.setDate(Date.from(nota.getDataOcorrencia().toInstant(ZoneOffset.UTC)));
        txtNotas.setText(nota.getTexto());
    }

    @Override
    public void salvar() {
        NotaDAO ndao = new NotaDAO();
        /* Coloca os dados do form na nota *;
        
        */
        nota.setTitulo(txtTitulo.getText());
        nota.setDataOcorrencia(LocalDateTime.ofInstant(dtcDataOcorrencia.getDate().toInstant(), ZoneId.systemDefault()));
        nota.setProjeto(txtProjeto.getText());
        nota.setTexto(txtNotas.getText());
        try {
            /**
             * Ele tem que verificar se o id da nota é zero
             */
            boolean salvo = false;
            if (nota.getId() == 0){
                salvo = ndao.save(nota);
            } else {
                salvo = ndao.update(nota);
            }//fim se
            //testa o acontecimento
            if (salvo){
                JOptionPane.showMessageDialog(rootPane, "Nota "+nota.getTitulo() + " foi salva!");
            } else {
                JOptionPane.showMessageDialog(rootPane, "Nota "+nota.getTitulo() + " não foi salva!");
            }//fim se
            
        } catch (SQLException ex) {
            br.attique.utils.logs.Log.log(getClass().getName(), ex);
        }
    }//fim classe

    /** Salva como arquivo de texto.
     * @return
     * false - se não conseguir salvar
     * true - se conseguir salvar
     */
    public boolean salvarComo(){
       /* tem que abrir um filechooser para salvar
        e verificar se a data e o título são nulos
        */
        if (txtTitulo.getText().isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "O título da nota não pode ser nulo");
            return false;
        }
        String nome = txtTitulo.getText()+".nt";
        File arquivo;
        JFileChooser jfc = new JFileChooser();
        jfc.setName("Salvar arquivo");
        int op;
        op = jfc.showSaveDialog(this);

        if (op == JFileChooser.APPROVE_OPTION){
            try{
                arquivo = new File(jfc.getSelectedFile().toPath()+".nt");
                FileWriter fw = new FileWriter(arquivo,true);
                BufferedWriter bw = new BufferedWriter(fw);
                bw.write("Titulo: "+txtTitulo.getText());
                bw.newLine();
                bw.write("Data: "+dtcDataOcorrencia.getDate().toString());
                bw.newLine();
                bw.write("Projeto: "+txtProjeto.getText());
                bw.newLine();
                bw.write(txtNotas.getText());
                bw.flush();
                bw.close();
                fw.close();
            } catch (IOException ex) {
                Logger.getLogger(FrmNota.class.getName()).log(Level.SEVERE, null, ex);
            }
        }//fim se
        return false;
    }//fim 
    
    @Override
    public void novo() {
        setDataForm(new Nota(0L, "", LocalDateTime.now(), "", ""));
    }

    @Override
    public void fechar() {
        int op = JOptionPane.showConfirmDialog(rootPane, "Deseja salvar as alterações?");
        if (op == 0){
            salvar();
            dispose();
        } else dispose();
    }

    
}//fim classe
